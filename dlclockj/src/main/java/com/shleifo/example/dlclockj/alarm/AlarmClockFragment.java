package com.shleifo.example.dlclockj.alarm;

import android.content.Context;
import android.database.Cursor;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.loader.app.LoaderManager;
import androidx.loader.content.Loader;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.shleifo.example.dlclockj.DeskClockFragment;
import com.shleifo.example.dlclockj.R;

public class AlarmClockFragment extends DeskClockFragment implements LoaderManager.LoaderCallbacks<Cursor> {

    private RecyclerView mRecyclerView;
    private RecyclerView.LayoutManager mLayoutManager;

    // Data
    private Loader mCursorLoader;

    public AlarmClockFragment() {

    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // 如果 ID 指定的加载器不存在，则 initLoader() 会触发 LoaderManager.LoaderCallbacks onCreateLoader() 方法。
        mCursorLoader = LoaderManager.getInstance(this).initLoader(0, null, this);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.content_simple_text, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        Context context = view.getContext();
        mRecyclerView = view.findViewById(R.id.alarm_recycler_view);
        mLayoutManager = new LinearLayoutManager(context);
        mRecyclerView.setLayoutManager(mLayoutManager);
    }

    @Override
    public void onStart() {
        super.onStart();
    }

    @Override
    public void onResume() {
        super.onResume();
    }

    /**
     * 当您尝试（例如，通过 initLoader()）访问加载器时，该方法将检查是否已存在由该 ID 指定的加载器。
     * 如果没有，它将触发 LoaderManager.LoaderCallbacks 方法 onCreateLoader()。
     * 在此方法中，您可以创建新加载器。新加载器通常是 CursorLoader，但您也可实现自己的 Loader 子类。
     * @param id The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @NonNull
    @Override
    public Loader<Cursor> onCreateLoader(int id, @Nullable Bundle args) {
        return null;
    }

    /**
     * 当先前创建的加载器完成加载时，将调用此方法。
     * 只有在释放为此加载器提供的最后一个数据后，您才可调用此方法。
     * 此时，您应移除所有使用的旧数据（因为它们很快会被释放），但请勿自行释放这些数据，
     * 因为这些数据归其加载器所有，该加载器会对其进行处理。
     * @param loader he Loader that has finished.
     * @param data The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(@NonNull Loader<Cursor> loader, Cursor data) {
        // Swap the new cursor in.  (The framework will take care of closing the
        // old cursor once we return.)
//        adapter.swapCursor(data);
    }


    /**
     * 当重置先前创建的加载器并因此导致其数据不可用时，将调用此方法。
     * 借助此回调，您可以了解何时将释放数据，以便及时移除其引用。
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(@NonNull Loader<Cursor> loader) {
        // This is called when the last Cursor provided to onLoadFinished()
        // above is about to be closed.  We need to make sure we are no
        // longer using it.
//        adapter.swapCursor(null);
    }
}
